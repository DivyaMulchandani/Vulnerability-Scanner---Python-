import requests
from threading import Thread

def check_improper_error_handling(url):
    try:
        response = requests.get(url + "/nonexistent-path", timeout=10)  # Trigger an error
        error_keywords = ["stack trace", "exception", "database error", "sql error"]
        for keyword in error_keywords:
            if keyword.lower() in response.text.lower():
                return True  # Vulnerable
        return False  # Secure error handling
    except requests.RequestException:
        return False  # Unable to test

def check_race_condition(target_url):
    def make_request():
        try:
            requests.post(target_url, json={"action": "update_balance"}, timeout=10)
        except requests.RequestException:
            pass

    threads = [Thread(target=make_request) for _ in range(5)]

    for thread in threads:
        thread.start()
    for thread in threads:
        thread.join()

    # Manual validation of the race condition scenario is required.
    return True  # Assume race condition vulnerability for demonstration

def check_inventory_manipulation(url):
    try:
        # Example of sending an excessive quantity
        payload = {"item_id": "123", "quantity": 999999}
        response = requests.post(url, json=payload, timeout=10)

        if response.status_code == 200 and "excessive" in response.text.lower():
            return True  # Vulnerable to manipulation
        return False  # No manipulation detected
    except requests.RequestException:
        return False  # Unable to test