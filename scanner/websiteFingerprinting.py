import requests
import re

def has_exposed_debug_info(url):
    """
    Scans responses for common debugging indicators such as stack traces or error messages.
    Useful for identifying pages with verbose error messages exposed.
    """
    response = requests.get(url)
    debug_signatures = ["Traceback (most recent call last)", "Exception:", "Error:", "Stacktrace:"]
    if any(signature in response.text for signature in debug_signatures):
        return True
    return False

def is_directory_indexing_enabled(url):
    """
    Checks if directory indexing is enabled by looking for directory listing indicators in HTTP responses.
    """
    test_url = f"{url}/testdir/"  # Test with a directory path
    response = requests.get(test_url)
    if "<title>Index of" in response.text or "Directory listing for" in response.text:
        return True
    return False

def is_directory_traversal_possible(url):
    """
    Checks for directory traversal vulnerability by sending directory traversal patterns.
    """
    traversal_patterns = ["../../../../etc/passwd", "../../../windows/win.ini"]
    
    for pattern in traversal_patterns:
        test_url = f"{url}/{pattern}"
        response = requests.get(test_url)
        
        # Check if the server returns sensitive system information
        if "root:" in response.text or "[extensions]" in response.text:
            return True  # Indicates possible directory traversal vulnerability
    return False

def is_admin_panel_open(url):
    """
    Checks if an open admin panel is accessible without authentication.
    """
    admin_urls = ["/admin", "/administrator", "/controlpanel"]
    try:
        for admin_url in admin_urls:
            test_url = url + admin_url
            response = requests.get(test_url, timeout=5)
            # If the admin page is accessible without authentication, it may indicate an open admin panel
            if response.status_code == 200 and "admin" in response.text.lower():
                return True
    except requests.RequestException:
        return False
    return False