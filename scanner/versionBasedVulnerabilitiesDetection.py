import subprocess
import json
import requests

def check_known_vulnerabilities(dependency_manager="npm"):
    """
    Checks for known vulnerabilities in dependencies.
    """
    if dependency_manager == "npm":
        command = ["npm", "audit", "--json"]
    elif dependency_manager == "pip":
        command = ["pip-audit", "--format", "json"]
    else:
        raise ValueError("Unsupported dependency manager")

    result = subprocess.run(command, capture_output=True, text=True)
    vulnerabilities = json.loads(result.stdout)
    
    if vulnerabilities:
        return vulnerabilities  # Returns details of vulnerabilities found
    return None  # No vulnerabilities found

def check_outdated_libraries(dependency_manager="npm"):
    """
    Checks for outdated libraries.
    """
    if dependency_manager == "npm":
        command = ["npm", "outdated", "--json"]
    elif dependency_manager == "pip":
        command = ["pip", "list", "--outdated", "--format", "json"]
    else:
        raise ValueError("Unsupported dependency manager")

    result = subprocess.run(command, capture_output=True, text=True)
    outdated_libraries = json.loads(result.stdout)
    
    if outdated_libraries:
        return outdated_libraries  # Returns list of outdated libraries
    return None  # No outdated libraries found

def is_web_server_unpatched(url):
    """
    Checks if the server is using an outdated version by looking at headers.
    """
    try:
        response = requests.head(url, timeout=5)
        server_header = response.headers.get("Server", "")
        outdated_servers = ["Apache/2.2", "nginx/1.12", "IIS/6.0"]  # Example outdated versions
        for outdated in outdated_servers:
            if outdated in server_header:
                return True
    except requests.RequestException:
        return False
    return False