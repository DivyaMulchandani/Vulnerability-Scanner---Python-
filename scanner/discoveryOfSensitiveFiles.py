import requests
import re

def is_weak_password_policy(url):
    weak_passwords = [
        "password123", "admin123", "123456", "qwerty", "letmein", "welcome", "iloveyou", "123qwe"
    ]
    
    # Add a dictionary of passwords
    dictionary_passwords = ["123456", "password", "123123", "admin", "12345", "letmein", "qwerty", "password1"]
    
    vulnerable = False
    for password in weak_passwords + dictionary_passwords:
        data = {'username': 'testuser', 'password': password}
        response = requests.post(url + "/login", data=data)
        
        if response.status_code == 200 and ("Welcome" in response.text or "Dashboard" in response.text):
            print(f"Weak password '{password}' bypassed login.")
            vulnerable = True
            
    return vulnerable

def has_hardcoded_credentials(url):
    """
    Scans source code or configuration files for hardcoded credentials.
    """
    response = requests.get(url)
    credentials_pattern = re.compile(r"(username|user|email|password|passwd|pass)[:=\s]+[\"'].*[\"']")
    
    if credentials_pattern.search(response.text):
        return True  # Hardcoded credentials found
    return False

def is_insecure_storage_used(url):
    """
    Checks if sensitive data like passwords or tokens are stored insecurely by scanning for local storage usage.
    """
    response = requests.get(url)
    insecure_storage_patterns = [
        re.compile(r"localStorage\.setItem\(.*password.*\)"),
        re.compile(r"sessionStorage\.setItem\(.*token.*\)")
    ]
    
    for pattern in insecure_storage_patterns:
        if pattern.search(response.text):
            return True  # Sensitive data is stored insecurely
    return False

def is_unencrypted_data_transmitted(url):
    """
    Checks if the website uses unencrypted (non-HTTPS) data transmission.
    """
    if url.startswith("http://"):
        return True  # Data transmission is unencrypted
    return False

def has_insufficient_logging(url):
    """
    Checks if the application lacks sufficient logging by looking for log endpoints or configurations.
    """
    try:
        response = requests.get(url + "/logs", timeout=5)
        if response.status_code == 200 and "log" in response.text.lower():
            return False
    except requests.RequestException:
        pass
    return True

def logs_sensitive_data(url):
    """
    Checks if sensitive data (like passwords) are logged by looking for such keywords in responses.
    """
    sensitive_keywords = ["password", "credit card", "ssn"]
    try:
        response = requests.get(url, timeout=5)
        for keyword in sensitive_keywords:
            if keyword in response.text.lower():
                return True
    except requests.RequestException:
        return False
    return False