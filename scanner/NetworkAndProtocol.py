import ssl
import socket
from urllib.parse import urlparse
import requests

def check_tls_weak_ciphers(url):
    parsed_url = urlparse(url)
    host = parsed_url.hostname
    port = parsed_url.port or 443  # Default to HTTPS port
    weak_ciphers = ["RC4", "MD5", "DES", "3DES"]

    try:
        context = ssl.create_default_context()
        with socket.create_connection((host, port), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=host) as ssock:
                cipher = ssock.cipher()[0]  # Get the cipher suite
                if any(weak_cipher in cipher for weak_cipher in weak_ciphers):
                    return True  # Vulnerable to weak cipher
        return False  # No weak cipher detected
    except (ssl.SSLError, socket.error):
        return False  # Unable to test


def check_dns_rebinding(url):
    parsed_url = urlparse(url)
    domain = parsed_url.hostname
    try:
        resolved_ips = socket.gethostbyname_ex(domain)[2]
        private_ip_ranges = [
            ("10.0.0.0", "10.255.255.255"),
            ("172.16.0.0", "172.31.255.255"),
            ("192.168.0.0", "192.168.255.255"),
        ]

        for ip in resolved_ips:
            for private_start, private_end in private_ip_ranges:
                if private_start <= ip <= private_end:
                    return True  # Vulnerable to DNS rebinding
        return False  # No DNS rebinding vulnerability detected
    except socket.error:
        return False  # Unable to test
    

################################################################check later
def check_ip_spoofing(url):
    spoofed_ips = [
        "192.168.1.100",  # Example private IP
        "10.0.0.1",       # Private IP
        "172.16.0.1",     # Private IP
        "8.8.8.8",        # Public IP (Google DNS)
        "127.0.0.1",      # Localhost
    ]
    
    try:
        for spoofed_ip in spoofed_ips:
            headers = {"X-Forwarded-For": spoofed_ip}
            response = requests.get(url, headers=headers, timeout=10)
            
            # Check if the spoofed IP appears in the response (or any abnormal behavior occurs)
            if response.status_code == 200 and spoofed_ip in response.text:
                return True  # Vulnerable to IP spoofing
        return False  # No spoofing vulnerability detected
    except requests.RequestException:
        return False  # Unable to test