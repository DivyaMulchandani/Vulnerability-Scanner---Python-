import requests
import re
import datetime

def is_mass_assignment_possible(url):
    """
    Tests for mass assignment by submitting unexpected parameters in a request payload.
    """
    payload = {
        "user_id": 1,
        "role": "admin",
        "permissions": "full_access"
    }
    
    response = requests.get(f"{url}/user/update", data=payload)
    
    if response.status_code == 200 and "role" in response.text:
        return True  # Indicates possible mass assignment vulnerability
    return False

def is_session_expiration_insufficient(url):
    """
    Checks for insufficient session expiration by analyzing cookies for expiration times.
    Flags any session cookie without an expiration time or with an overly long expiration.
    """
    response = requests.get(url)
    session_cookie = response.cookies.get('sessionid')
    
    if session_cookie:
        expires = session_cookie.get('expires')
        if not expires:
            # Session cookie has no expiration set, likely insufficient
            return True
        else:
            # Convert expiration time to datetime object and check its duration
            expiration_date = datetime.datetime.strptime(expires, "%a, %d-%b-%Y %H:%M:%S GMT")
            if (expiration_date - datetime.datetime.utcnow()).days > 7:
                return True  # Expiration date is too far in the future
    return False

def uses_unsafe_eval(url):
    """
    Checks if JavaScript files on the page use eval(), which is considered unsafe.
    """
    try:
        response = requests.get(url, timeout=5)
        js_files = re.findall(r'<script src="([^"]+)"', response.text)
        for js_file in js_files:
            full_js_url = requests.compat.urljoin(url, js_file)
            js_content = requests.get(full_js_url).text
            if "eval(" in js_content:
                return True
    except requests.RequestException:
        return False
    return False