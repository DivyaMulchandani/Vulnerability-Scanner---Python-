import requests
import json

def check_host_header_injection(target_url):
    """
    Scans the target URL for Host Header Injection vulnerabilities.
    Returns True if the vulnerability is detected, otherwise False.
    """
    malicious_host = "malicious.example.com"
    headers = {
        "Host": malicious_host
    }
    
    try:
        response = requests.get(target_url, headers=headers, timeout=10)
        # Check if the malicious host is reflected in the response
        if malicious_host in response.text:
            return True
        return False
    except requests.RequestException:
        # If there's a request error, we treat it as no detection
        return False

def check_js_prototype_pollution(target_url):
    """
    Scans the target URL for JavaScript Prototype Pollution vulnerabilities.
    Returns True if the vulnerability is detected, otherwise False.
    """
    # Typical payload for prototype pollution
    payload = {
        "__proto__": {
            "polluted": "true"
        }
    }
    
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(target_url, data=json.dumps(payload), headers=headers, timeout=10)
        
        # Check if the response reflects the polluted property
        if "polluted" in response.text:
            return True
        return False
    except requests.RequestException:
        # If there's a request error, we treat it as no detection
        return False
    
def check_ssti(target_url):
    """
    Scans the target URL for Server-Side Template Injection (SSTI) vulnerabilities.
    Returns True if the vulnerability is detected, otherwise False.
    """
    # Typical payloads for testing SSTI
    payloads = [
        "{{7*7}}",  # For Jinja2 and similar engines
        "${7*7}",   # For Spring and similar engines
    ]

    for payload in payloads:
        try:
            response = requests.post(target_url, data={"input": payload}, timeout=10)
            if "49" in response.text:  # Result of 7*7
                return True
        except requests.RequestException:
            # Ignore exceptions during requests and assume no detection
            return False
    
    return False