import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from .broken_api_authentication import is_api_authentication_broken
from .command_injection import is_command_injection_vulnerable
from .config import has_insecure_configuration
from .cors_configuration import is_cors_configuration_insecure
from .csrf import is_csrf_vulnerable
from .data_exposure import is_excessive_data_exposed
from .debug_info import has_exposed_debug_info
from .default_credentials import has_default_credentials
from .directory_indexing import is_directory_indexing_enabled
from .directory_traversal import is_directory_traversal_possible
from .hardcoded_credentials import has_hardcoded_credentials
from .idor import is_idor_vulnerable
from .insecure_storage import is_insecure_storage_used
from .jwt_security import is_jwt_insecure
from .known_vulnerabilities import check_known_vulnerabilities
from .ldap_injection import is_ldap_injection_vulnerable
from .mass_assignment import is_mass_assignment_possible
from .mime_type_spoofing import is_mime_type_spoofing_possible
from .object_deserialization import is_unsafe_deserialization
from .outdated_libraries import check_outdated_libraries
from .rate_limiting import has_missing_rate_limiting
from .session_expiration import is_session_expiration_insufficient
from .session_hijacking import is_session_hijacking_vulnerable
from .sql_injection import is_sql_injection_vulnerable
from .unencrypted_data import is_unencrypted_data_transmitted
from .unrestricted_file_uploads import is_file_upload_unrestricted
from .weak_crypto import uses_weak_crypto
from .weak_password_policy import is_weak_password_policy
from .xss import is_xss_vulnerable
from .xxe_inection import is_xxe_vulnerable
from .remote_file_inclusion import is_remote_file_inclusion_vulnerable
from .insecure_framework_configuration import has_insecure_framework_configuration
from .unsafe_eval import uses_unsafe_eval
from .insufficient_logging import has_insufficient_logging
from .sensitive_data_logging import logs_sensitive_data
from .open_redirect import is_open_redirect_vulnerable
from .weak_authorization import has_weak_authorization
from .workflow_manipulation import can_manipulate_workflow
from .unpatched_web_server import is_web_server_unpatched
from .inadequate_rbac import has_inadequate_rbac
from .open_admin_panel import is_admin_panel_open


# Define a dictionary of vulnerability checks to make it easy to add/remove checks
vulnerability_checks = {
    "SQL Injection vulnerability": is_sql_injection_vulnerable,
    #"NoSQL Injection vulnerability": is_nosql_injection_vulnerable,
    "Cross-Site Scripting (XSS) vulnerability": is_xss_vulnerable,
    "Command Injection vulnerability": is_command_injection_vulnerable,
    "LDAP Injection vulnerability": is_ldap_injection_vulnerable,
    "XML External Entities (XXE) vulnerability": is_xxe_vulnerable,
    "Weak Password Policy": is_weak_password_policy,
    "Session Hijacking vulnerability": is_session_hijacking_vulnerable,
    "Insufficient Session Expiration vulnerability": is_session_expiration_insufficient,
    "Unsecured JWT Tokens": is_jwt_insecure,
    "Unsafe Object Deserialization vulnerability": is_unsafe_deserialization,
    "Exposed Debugging/Stack Traces": has_exposed_debug_info,
    "Default Credentials": has_default_credentials,
    "Directory Indexing vulnerability": is_directory_indexing_enabled,
    "Cross-Site Request Forgery (CSRF) vulnerability": is_csrf_vulnerable,
    "Insecure Direct Object References (IDOR) vulnerability": is_idor_vulnerable,
    "Hardcoded Credentials": has_hardcoded_credentials,
    "Insecure Storage of Sensitive Data": is_insecure_storage_used,
    "Unencrypted Data Transmission": is_unencrypted_data_transmitted,
    "Weak Cryptographic Implementations": uses_weak_crypto,
    "Broken API Authentication": is_api_authentication_broken,
    "Missing Rate-Limiting in APIs": has_missing_rate_limiting,
    "Excessive Data Exposure in APIs": is_excessive_data_exposed,
    "Mass Assignment": is_mass_assignment_possible,
    "Known Vulnerabilities in Dependencies": check_known_vulnerabilities,
    "Outdated Libraries": check_outdated_libraries,
    "Improper CORS Configuration": is_cors_configuration_insecure,
    "Unrestricted File Uploads": is_file_upload_unrestricted,
    "MIME Type Spoofing": is_mime_type_spoofing_possible,
    "Directory Traversal": is_directory_traversal_possible,
    "Remote File Inclusion": is_remote_file_inclusion_vulnerable,
    "Insecure Framework Configuration": has_insecure_framework_configuration,
    "Unsafe eval() Usage": uses_unsafe_eval,
    "Insufficient Logging": has_insufficient_logging,
    "Sensitive Data Logging": logs_sensitive_data,
    "Open Redirect": is_open_redirect_vulnerable,
    "Weak Authorization Checks": has_weak_authorization,
    "Application Workflow Manipulation": can_manipulate_workflow,
    "Unpatched Web Server": is_web_server_unpatched,
    "Inadequate Role-Based Access Control (RBAC)": has_inadequate_rbac,
    "Open Admin Panel": is_admin_panel_open,
}

def scan_multiple_websites(urls):
    website_vulnerabilities = {}

    for url in urls:
        print(f"\nStarting scan for website: {url}")
        vulnerabilities_count = scan_website(url)
        website_vulnerabilities[url] = vulnerabilities_count
        print(f"Total vulnerabilities found on {url}: {vulnerabilities_count}")
        print("=" * 50)

    print("\nSummary of Vulnerabilities Found:")
    for url, count in website_vulnerabilities.items():
        print(f"{url}: {count} vulnerabilities found")

def discover_urls(base_url):
    """
    Discover and return a list of all URLs found on the given base URL page.
    
    Parameters:
    - base_url (str): The URL of the page to scan for links.

    Returns:
    - list: A list of discovered URLs.
    """
    discovered_urls = []
    try:
        response = requests.get(base_url)
        response.raise_for_status()  # Check for HTTP errors
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Find all anchor tags with href attributes
        for link in soup.find_all('a', href=True):
            full_url = urljoin(base_url, link['href'])
            discovered_urls.append(full_url)
    
    except requests.RequestException as e:
        print(f"Error fetching URLs from {base_url}: {e}")
    
    return discovered_urls

def scan_website(url):
    try:
        discovered_urls = discover_urls(url)
        print(f"Discovered {len(discovered_urls)} URLs on {url}\n")
###########################################################################################change this later
        # Limit to the first 10 URLs
        discovered_urls = discovered_urls[:10]


    except Exception as e:
        print(f"Error discovering URLs on {url}: {e}")
        return 0
    
    total_vulnerabilities = 0

    for page_url in discovered_urls:
        vulnerabilities = scan_url(page_url)
        if vulnerabilities:
            print(f"\nVulnerabilities found on {page_url}:")
            for vulnerability, details in vulnerabilities.items():
                print(f"- {vulnerability}: {details['description']}")
                print(f"  Attack Method: {details['attack_method']}")
                total_vulnerabilities += 1

    return total_vulnerabilities

def scan_url(url):
    vulnerabilities = {}

    for vuln_name, check_function in vulnerability_checks.items():
        try:
            if check_function(url):
                vulnerabilities[vuln_name] = {
                    "description": vuln_name,
                    "attack_method": get_attack_method(vuln_name)
                }
        except Exception as e:
            print(f"Error checking {vuln_name} on {url}: {e}")

    return vulnerabilities

def get_attack_method(vuln_name):
    attack_methods = {
        "SQL Injection vulnerability": "Inject SQL code to manipulate queries (e.g., ' OR '1'='1').",
        "NoSQL Injection vulnerability": "Inject NoSQL syntax to manipulate database operations.",
        "Cross-Site Scripting (XSS) vulnerability": "Inject malicious scripts (e.g., <script>alert('XSS')</script>).",
        "Command Injection vulnerability": "Inject OS commands via vulnerable input fields.",
        "LDAP Injection vulnerability": "Manipulate LDAP queries through crafted inputs.",
        "XML External Entities (XXE) vulnerability": "Exploit XML parsers by injecting external entities.",
        "Weak Password Policy": "Allow weak or easily guessable passwords.",
        "Session Hijacking vulnerability": "Expose session tokens to hijacking attempts.",
        "Insufficient Session Expiration vulnerability": "Fail to properly invalidate sessions on logout.",
        "Unsecured JWT Tokens": "Allow tokens without proper encryption or signature.",
        "Unsafe Object Deserialization vulnerability": "Use of untrusted data in deserialization.",
        "Exposed Debugging/Stack Traces": "Exposes debugging or stack trace information.",
        "Default Credentials": "Application uses default, well-known credentials.",
        "Directory Indexing vulnerability": "Enable access to file directories directly.",
        "Cross-Site Request Forgery (CSRF) vulnerability": "Allow requests from an attacker without verification.",
        "Insecure Direct Object References (IDOR) vulnerability": "Expose direct access to objects via identifiers.",
        "Hardcoded Credentials": "Sensitive credentials are hardcoded in the application.",
        "Insecure Storage of Sensitive Data": "Store sensitive data without encryption.",
        "Unencrypted Data Transmission": "Transmit sensitive data without encryption.",
        "Weak Cryptographic Implementations": "Use outdated or weak cryptographic functions.",
        "Broken API Authentication": "API endpoints lack proper authentication checks.",
        "Missing Rate-Limiting in APIs": "APIs lack rate limits to prevent abuse.",
        "Excessive Data Exposure in APIs": "Exposes excessive data in API responses.",
        "Mass Assignment vulnerability": "Allow mass assignment of critical parameters.",
        "Known Vulnerabilities in Dependencies": "Use dependencies with known security vulnerabilities.",
        "Outdated Libraries": "Use outdated libraries with potential security risks.",
        "Improper CORS Configuration": "Misconfigured CORS headers allow cross-origin requests.",
        "Unrestricted File Uploads": "Allows malicious files to be uploaded without restriction.",
        "MIME Type Spoofing vulnerability": "Upload files with a misleading MIME type.",
        "Directory Traversal vulnerability": "Access restricted files by navigating the directory structure.",
        "Remote File Inclusion": "Inject remote file paths to execute external files on the server.",
        "Insecure Default Framework Configurations": "Rely on default framework settings, which may expose vulnerabilities.",
        "Unsafe use of eval() in JavaScript": "Allow untrusted data to be evaluated as code, leading to code injection.",
        "Insufficient Logging and Monitoring": "Fail to log critical events, making intrusion detection difficult.",
        "Logging of Sensitive Data": "Store sensitive data in logs, risking exposure of credentials or personal information.",
        "Open Redirects": "Redirect users to untrusted sites by manipulating URLs in parameters.",
        "Weak Authorization Checks": "Allow access to restricted actions or data due to insufficient authorization checks.",
        "Manipulation of Application Workflows": "Exploit workflow flaws to bypass steps or gain unintended access.",
        "Unpatched Web Servers": "Use web servers with known vulnerabilities due to lack of patching.",
        "Inadequate Role-Based Access Control (RBAC)": "Allow access to sensitive resources due to insufficient role checks.",
        "Open Admin Panels": "Expose administrative panels without proper access control, allowing unauthorized access."
    }
    return attack_methods.get(vuln_name, "No specific attack method available.")


