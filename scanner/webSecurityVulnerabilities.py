import requests

from selenium import webdriver
from selenium.webdriver.chrome.options import Options

def check_clickjacking(target_url):
    try:
        response = requests.get(target_url, timeout=10)
        headers = response.headers

        # Check for protective headers
        if 'X-Frame-Options' not in headers and 'Content-Security-Policy' not in headers:
            return True  # Vulnerable to Clickjacking
        return False  # Not Vulnerable
    except requests.RequestException:
        return False  # Unable to test

def check_csp(target_url):
    try:
        response = requests.get(target_url, timeout=10)
        headers = response.headers

        csp = headers.get('Content-Security-Policy')
        if not csp:
            return True  # Vulnerable (No CSP header)

        # Basic unsafe CSP patterns
        unsafe_directives = [
            "unsafe-inline",
            "unsafe-eval",
            "*",  # Allowing all origins
            "data:",  # Permitting data URIs
            "blob:"  # Permitting blob URIs
        ]
        for directive in unsafe_directives:
            if directive in csp:
                return True  # Vulnerable CSP
        return False  # Secure CSP
    except requests.RequestException:
        return False  # Unable to test


def check_html5_storage(target_url):
    try:
        # Set up headless browser for testing
        options = Options()
        options.add_argument("--headless")
        driver = webdriver.Chrome(options=options)
        driver.get(target_url)

        # Execute JavaScript to check for sensitive data in storage
        local_storage_data = driver.execute_script("return JSON.stringify(localStorage);")
        session_storage_data = driver.execute_script("return JSON.stringify(sessionStorage);")

        driver.quit()

        # Check if sensitive data is present (e.g., passwords, tokens, etc.)
        sensitive_keywords = ["password", "token", "secret", "key"]
        for keyword in sensitive_keywords:
            if keyword in local_storage_data or keyword in session_storage_data:
                return True  # Vulnerable
        return False  # Not Vulnerable
    except Exception:
        return False  # Unable to test
